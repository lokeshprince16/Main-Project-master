import { __makeTemplateObject } from "tslib";
import React from 'react';
import ShimmerDiv from '../ShimmerDiv/ShimmerDiv';
import styled, { css } from 'styled-components';
import ShimmerTitle from '../ShimmerTitle/ShimmerTitle';
import ShimmerText from '../ShimmerText/ShimmerText';
import ShimmerButton from '../ShimmerButton/ShimmerButton';
function gradientColors(props) {
    if (props.mode === "custom") {
        return [props.from, props.via, props.to];
    }
    else {
        return ["", "", ""];
    }
}
export default function ShimmerCategoryItems(props) {
    var _a = gradientColors(props), from = _a[0], via = _a[1], to = _a[2];
    return React.createElement("div", { className: "shimmer-category-items-main-div" },
        (props.loading && !props.children) &&
            Array.from({ length: props.items }).map(function (_, index) {
                return React.createElement(React.Fragment, null,
                    React.createElement(CategoryItemDiv, { className: props.className, key: index, itemGap: props.itemGap },
                        props.hasImage &&
                            React.createElement(ShimmerDiv, { className: "shimmer-category-items-image ", mode: props.mode, height: props.imageHeight, width: props.imageWidth, rounded: props.imageRounded, from: from, via: via, to: to }),
                        React.createElement(CategoryItemDetails, { className: "shimmer-category-items-details", contentPosition: props.contentPosition },
                            props.hasTitle &&
                                React.createElement(ShimmerTitle, { className: "shimmer-category-items-title-div", mode: props.mode, line: 1, gap: 6, height: 13, from: from, via: via, to: to }),
                            props.hasText &&
                                React.createElement(ShimmerText, { className: "shimmer-category-items-text-div", mode: props.mode, line: 3, gap: 6, height: 5, from: from, via: via, to: to }),
                            props.hasButton &&
                                React.createElement(ShimmerButton, { className: "shimmer-category-items-button", mode: props.mode, size: 'sm', from: from, via: via, to: to }))));
            }),
        (props.loading && props.children) ?
            Array.from({ length: props.items }).map(function (_, index) {
                return React.createElement(React.Fragment, null,
                    React.createElement(CategoryItemDiv, { className: props.className, key: index, itemGap: props.itemGap },
                        props.hasImage &&
                            React.createElement(ShimmerDiv, { className: "shimmer-category-items-image ", mode: props.mode, height: props.imageHeight, width: props.imageWidth, rounded: props.imageRounded, from: from, via: via, to: to }),
                        React.createElement(CategoryItemDetails, { className: "shimmer-category-items-details", contentPosition: props.contentPosition },
                            props.hasTitle &&
                                React.createElement(ShimmerTitle, { className: "shimmer-category-items-title-div", mode: props.mode, line: 1, gap: 6, height: 13, from: from, via: via, to: to }),
                            props.hasText &&
                                React.createElement(ShimmerText, { className: "shimmer-category-items-text-div", mode: props.mode, line: 3, gap: 6, height: 5, from: from, via: via, to: to }),
                            props.hasButton &&
                                React.createElement(ShimmerButton, { className: "shimmer-category-items-button", mode: props.mode, size: 'sm', from: from, via: via, to: to }))));
            })
            : props.children);
}
ShimmerCategoryItems.defaultProps = {
    items: 1,
    itemGap: 30,
    imageHeight: 100,
    imageWidth: 100,
    imageRounded: 0,
    hasTitle: true,
    hasText: true,
    hasButton: true,
    hasImage: true,
    contentCenter: "start",
    loading: true,
    className: "shimmer-category-items"
};
var CategoryItemDiv = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    display: flex;\n    ", ";\n"], ["\n    display: flex;\n    ", ";\n"])), function (p) { return p.itemGap && css(templateObject_1 || (templateObject_1 = __makeTemplateObject([" \n        margin-bottom: ", "px;\n    "], [" \n        margin-bottom: ", "px;\n    "])), p.itemGap); });
var CategoryItemDetails = styled.div(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n    display: flex;\n    flex-direction: column;\n    ", ";\n    ", ";\n    ", ";\n    gap: 0.3em;\n    padding-inline: 1em;\n    width: 100%;\n"], ["\n    display: flex;\n    flex-direction: column;\n    ", ";\n    ", ";\n    ", ";\n    gap: 0.3em;\n    padding-inline: 1em;\n    width: 100%;\n"])), function (p) { return p.contentPosition == "start" && css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n        align-self:self-start;\n    "], ["\n        align-self:self-start;\n    "]))); }, function (p) { return p.contentPosition == "center" && css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n        align-self:center;\n    "], ["\n        align-self:center;\n    "]))); }, function (p) { return p.contentPosition == "end" && css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n        align-self:self-end;\n    "], ["\n        align-self:self-end;\n    "]))); });
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;
//# sourceMappingURL=ShimmerCategoryItems.js.map